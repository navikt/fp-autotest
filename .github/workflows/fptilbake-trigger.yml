name: Kjører verdikjedetestene for fptilbake

on:
  repository_dispatch:
    types: [fptilbake-verdikjede]

jobs:
  build:
    name: Utfør verdikjedetestene for ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.3
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV
      - uses: actions/cache@v2.1.2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v1.4.3
        with:
          java-version: 1.11

      - name: Setup verdikjeden
        shell: bash
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          echo "${{ secrets.GH_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          cd ../pipeline
          ./update-versions.sh ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
          docker-compose up --quiet-pull --detach fpsak fpformidling fpoppdrag fptilbake fprisk

      - name: Venter på stacken og sjekker status
        shell: bash
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpformidling er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8010/fpformidling/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fptilbake er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8030/fptilbake/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fprisk er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8075/fprisk/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV

      - name: Utfører verdikjedetestene for fptilbake
        if: always() && env.STACK_STARTED == 'true'
        id: tester
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P fptilbake > >(tee test-result-log.txt)
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Henter testresultat og setter outcome
        if: always() && env.STACK_STARTED == 'true' && steps.tester.outcome != 'skipped' && steps.tester.outcome != 'cancelled'
        shell: bash
        run: |
          echo "TEST_RESULTAT=$(grep -o 'Tests run: [0-9]\+, Failures: [0-9]\+, Errors: [0-9]\+, Skipped: [0-9]\+$' test-result-log.txt)" >> $GITHUB_ENV
          rm test-result-log.txt
          if [ ${{ steps.tester.outcome }} == success ]; then
            echo "Test success!"
            echo "TEST_OUTCOME=success" >> $GITHUB_ENV
          else
            echo "Test failure!"
            echo "TEST_OUTCOME=failure" >> $GITHUB_ENV
          fi

      - name: Oppdaterer issue med testresultat
        if: always() && steps.tester.outcome != 'skipped' && steps.tester.outcome != 'cancelled' && github.event_name != 'push' && github.event.client_payload.issue-number != null
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          event-type: update-issue
          client-payload: |
            {
            "trigger": "${{ github.event.client_payload.trigger }}",
            "issue-number": "${{ github.event.client_payload.issue-number }}",
            "success": "${{ env.TEST_OUTCOME }}",
            "run_id": "${{ github.run_id }}"
            }

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: container-logs

      - name: Sjekker storage
        if: failure()
        shell: bash
        run: |
          docker system df -v
          docker system df
          df -h
