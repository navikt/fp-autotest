name: Undersøker loggene for feil og lekking av sensitive informasjon

on:
  push:
    branches:
      - master
  schedule:
    - cron:  '* 7 * * 5'

jobs:
  verdikjedetestene:
    name: Utfører verdikjedetestene og sjekker loggen for feil og lekking av sensitive informasjon
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v1
        with:
          java-version: 1.15

      - name: Setup verdikjeden
        shell: bash
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          echo "${{ secrets.GH_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          echo "${{ secrets.GH_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin ghcr.io
          cd ../pipeline
          ./update-versions.sh ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
          docker-compose up --quiet-pull --detach fpsak fpformidling fpdokgen fpoppdrag fptilbake fprisk fpabonnent fpinfo fpfordel fpsoknad-mottak

      - name: Venter på stacken og sjekker status
        shell: bash
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 180 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpformidling er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8010/fpformidling/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpdokgen er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8291)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fptilbake er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8030/fptilbake/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fprisk er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8075/fprisk/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabonnent er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8065/fpabonnent/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpfordel er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8090/fpfordel/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpinfo er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8040/fpinfo/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!

          echo "STACK_STARTED=true" >> $GITHUB_ENV

      - name: Utfører verdikjedetestene
        if: always() && env.STACK_STARTED == 'true'
        id: tester
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P verdikjede > >(tee test-result-log.txt)
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Kjører loggtestene på loggen
        if: always() && env.STACK_STARTED == 'true'
        id: logger
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P logger
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs-verdikjede
          cd container-logs-verdikjede
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs-verdikjede
          path: container-logs-verdikjede




  autotestene:
    name: Utfører autotestene og sjekker loggen for feil og lekking av sensitive informasjon
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v1
        with:
          java-version: 1.15

      - name: Setup fpsak og dens avhengigheter
        shell: bash
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          echo "${{ secrets.GH_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          echo "${{ secrets.GH_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin ghcr.io
          cd ../../lokal-utvikling
          ./setup-lokal-utvikling.sh --mock fptilbake --mock fpoppdrag --mock fpformidling --mock fprisk
          ./update-versions.sh ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
          docker-compose -f docker-compose-lokal/docker-compose.yml up --quiet-pull --detach fpsak

      - name: Venter på stacken og sjekker status
        shell: bash
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fp-sak er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV

      - name: Utfører foreldrepengetestene for fpsak
        if: always() && env.STACK_STARTED == 'true'
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P fpsak > >(tee test-result-log.txt)
          docker stats --no-stream
          free -m
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Kjører loggtestene på loggen
        if: always() && env.STACK_STARTED == 'true'
        id: logger
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P logger
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}

#      - name: Slack Notification
#        if: steps.logger.outcome != 'failure'
#        uses: rtCamp/action-slack-notify@v2.1.3
#        env:
#          SLACK_CHANNEL: vtp-autotest-resultat
#          SLACK_COLOR: '#FFEF07'
#          SLACK_ICON: https://github.com/github.png?size=48
#          SLACK_TITLE: 'Feil i loggene ved kjøring av Autotestene'
#          SLACK_MESSAGE: 'For mer info se <https://github.com/navikt/fpsak-autotest/actions/runs/${{ env.RUN_ID }}|her>'
#          SLACK_USERNAME: Github Action
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#          SLACK_FOOTER: ''
#          MSG_MINIMAL: true

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs-autotest
          cd container-logs-autotest
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs-autotest
          path: container-logs-autotest
