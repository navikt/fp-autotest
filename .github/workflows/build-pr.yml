name: Kjører Autotestene for verdikjeden PR

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'JenkinsfileAutotest'
      - 'JenkinsfileAutotestNew'
      - 'CODEOWNERS'
      - '.github/workflows/deprecated-verdikjede-trigger.yml'
      - '.github/workflows/deprecated-fpsak-trigger.yml'
      - '.github/workflows/trigger.yml.yml'
      - 'lokalutvikling/*'

env:
  GITHUB_USERNAME: x-access-token
  GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:
  build:
    name: Utfør verdikjede-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 16

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9 # Use commit-sha1 instead of tag for security concerns
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup fpsak og dens avhengigheter
        shell: bash
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          cd ../../lokal-utvikling
          ./setup-lokal-utvikling.sh --mock fptilbake --mock fpoppdrag --mock fpformidling --mock fprisk
          ./update-versions.sh ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
          docker-compose -f docker-compose-lokal/docker-compose.yml up --quiet-pull --detach fpsak

      - name: Venter på stacken og sjekker status
        shell: bash
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fp-sak er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV

      - name: Kjører enhetstester for autotest
        shell: bash
        run: |
          mvn clean install --settings .github/.m2/settings.xml

      - name: Utfører autotestene for fpsak
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P fpsak
          docker stats --no-stream
          free -m

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: container-logs

      - name: Sjekker storage
        if: failure()
        shell: bash
        run: |
          docker stats --no-stream
          docker system df -v
          df -h
