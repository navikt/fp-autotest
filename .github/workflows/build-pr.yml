name: Kjører Autotestene for verdikjeden PR

on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'JenkinsfileAutotest'
      - 'JenkinsfileAutotestNew'
      - 'CODEOWNERS'
      - '.github/workflows/verdikjede-trigger.yml'
      - '.github/workflows/fpsak-trigger.yml'
      - 'lokalutvikling/*'

jobs:
  build:
    name: Utfør verdikjede-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2.1.0
        env:
          SLACK_CHANNEL: fp-verdikjedetester
          SLACK_COLOR: #37df1d
          SLACK_ICON: https://github.com/github.png?size=48
          SLACK_TITLE: TEST
          SLACK_MESSAGE: Test
          SLACK_USERNAME: Github Action
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: ''


      - name: Notification til slack
        shell: bash
        run: |
          curl -X POST --data-urlencode \
          'payload={"channel": "#fp-verdikjedetester",
          "username": "Github Action",
          "blocks": [ { "type": "section", "text": {
          "type": "mrkdwn",
          "text": " TEST "
          } } ],
          "icon_emoji": ":snowman:"}' ${{ secrets.SLACK_WEBHOOK }}

#      - name: Setup fpsak og dens avhengigheter
#        shell: bash
#        run: |
#          echo ::set-env name=STACK_STARTED::false
#          echo "Oppretter dummy keystore for testing"
#          cd resources/keystore
#          ./make-dummy-keystore.sh
#          echo "${{ secrets.GH_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
#          cd ../../lokal-utvikling
#          ./setup-lokal-utvikling.sh
#          ./update-versions.sh ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
#          docker-compose -f docker-compose-lokal/docker-compose.yml up --quiet-pull --detach fpsak
#
#      - name: Venter på stacken og sjekker status
#        shell: bash
#        run: |
#          echo ::set-env name=STACK_CREATED::true
#          docker ps -a
#          echo
#          echo "Tester om VTP er oppe"
#          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
#          echo Oppe!
#          echo
#          echo "Tester om fpabakus er oppe"
#          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
#          echo Oppe!
#          echo
#          echo "Tester om fp-sak er oppe"
#          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
#          echo Oppe!
#          echo ::set-env name=STACK_STARTED::true
#
#      - name: Utfører autotestene for fpsak
#        shell: bash
#        run: |
#          mvn test --batch-mode --settings .github/.m2/settings.xml -P fpsak
#        env:
#          GITHUB_USERNAME: x-access-token
#          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}
#
#      - name: Dumper logger for feilsøking
#        if: failure() && env.STACK_CREATED == 'true'
#        run: |
#          mkdir container-logs
#          cd container-logs
#          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done
#
#      - name: Laste opp logger
#        if: failure()
#        uses: actions/upload-artifact@v2
#        with:
#          name: logs
#          path: container-logs
#
#      - name: Sjekker storage
#        if: failure()
#        shell: bash
#        run: |
#          docker system df -v
#          docker system df
#          df -h
