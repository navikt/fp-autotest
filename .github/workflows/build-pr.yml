name: Kjører Autotestene for verdikjeden PR

on: [pull_request]

jobs:
  build:
    name: Utfør verdikjede-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set cache key
        run: |
          echo "::set-env name=CACHE_KEY::$(expr $(date +%V) - 1 + 1)"
          echo "::set-env name=PREVIOUS_CACHE_KEY::$(expr $(date +%V) - 1)"
      - uses: actions/cache@v2.0.0
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v1.3.0
        with:
          java-version: 1.11

      - name: Setup verdikjeden
        shell: bash
        run: |
          echo ::set-env name=STACK_STARTED::false
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          echo "${{ secrets.GITHUB_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          cd ../pipeline
          ./update-versions.sh ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
          docker-compose up --quiet-pull --detach fpsak fpformidling fpoppdrag fptilbake

      - name: Venter på stacken og sjekker status
        shell: bash
        run: |
          echo ::set-env name=STACK_CREATED::true
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 90 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fp-sak er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fp-formidling er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8010/fpformidling/internal/health/isAlive)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isAlive)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fptilbake er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8030/fptilbake/internal/isAlive)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo ::set-env name=STACK_STARTED::true

      - name: Utfører autotestene for fpsak
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P fpsak
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: container-logs

      - name: Sjekker storage
        if: failure()
        shell: bash
        run: |
          docker system df -v
          docker system df
          df -h
