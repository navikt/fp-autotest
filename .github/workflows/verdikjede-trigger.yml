name: Kjører verdikjedetestene for verdikjeden

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'JenkinsfileAutotest'
      - 'JenkinsfileAutotestNew'
      - 'CODEOWNERS'
      - '.github/workflows/build-pr.yml'
      - 'lokalutvikling/*'
  repository_dispatch:
    types: [fpsak-verdikjede, fpformidling-verdikjede, fabakus-verdikjede, fpoppdrag-verdikjede, fptilbake-verdikjede]
  schedule:
    - cron:  '0 0 * * *'

jobs:
  build:
    name: Utfør verdikjede-test for ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.1
      - name: Set cache key
        run: |
          echo "::set-env name=CACHE_KEY::$(expr $(date +%V) - 1 + 1)"
          echo "::set-env name=PREVIOUS_CACHE_KEY::$(expr $(date +%V) - 1)"
      - uses: actions/cache@v2.1.0
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v1.3.0
        with:
          java-version: 1.11

      - name: Setup verdikjeden
        shell: bash
        run: |
          echo ::set-env name=STACK_STARTED::false
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          echo "${{ secrets.GITHUB_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          cd ../pipeline
          ./update-versions.sh ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
          docker-compose up --quiet-pull --detach fpsak fpformidling fpoppdrag fptilbake

      - name: Venter på stacken og sjekker status
        shell: bash
        run: |
          echo ::set-env name=STACK_CREATED::true
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 90 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpformidling er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8010/fpformidling/internal/health/isAlive)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isAlive)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fptilbake er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8030/fptilbake/internal/isAlive)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo ::set-env name=STACK_STARTED::true

      - name: Utfører verdikjedetestene
        id: tester
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P verdikjede > >(tee test-result-log.txt)
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Oppdaterer issue ved feilfrie tester
        if: success() && github.event_name != 'push' && github.event.client_payload.issue-number != null
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          repository: ${{ github.event.client_payload.trigger }}
          event-type: update-issue
          client-payload: '{ "issue-number": "${{ github.event.client_payload.issue-number }}", "success": "true" }'

      - name: Oppdaterer issue ved testfeil
        if: failure() && github.event_name != 'push' && github.event.client_payload.issue-number != null
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          repository: ${{ github.event.client_payload.trigger }}
          event-type: update-issue
          client-payload: '{ "issue-number": "${{ github.event.client_payload.issue-number }}", "success": "false" }'

      - name: Henter ut historie
        if: always() && github.event_name == 'repository_dispatch' && github.event.client_payload.trigger != null && github.event.client_payload.version != null
        id: slacknotify
        uses: actions/checkout@v2.3.1
        with:
          repository: ${{ github.event.client_payload.trigger }}
          path: ${{ github.event.client_payload.trigger }}
          token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          fetch-depth: 5

      - name: Hent ut versjon fra forrige issue
        if: always() && steps.slacknotify.outcome == 'success'
        shell: bash
        run: |
          CURRENT_HASH=$(echo "${{ github.event.client_payload.version }}" | awk -F'-' '{print $3}')
          cd "${{ github.event.client_payload.trigger }}"
          git remote -v
          git fetch
          echo "::set-env name=DIFFERANSE::$(git log --pretty=format:"%s; author: %an" -n 1 ${CURRENT_HASH})"

      - name: Bygger opp slack melding
        if: always() && steps.slacknotify.outcome == 'success'
        shell: bash
        run: |
          if [ ${{ env.STACK_STARTED }} == true ]; then
            echo "Stack up and running!"
            TEST_RESULTAT=$(grep -o 'Tests run: [0-9]\+, Failures: [0-9]\+, Errors: [0-9]\+, Skipped: [0-9]\+$' test-result-log.txt)
            echo "::set-env name=SLACK_MESSAGE::*Trigger*: ${{ github.event.client_payload.trigger }}:${{ github.event.client_payload.version }}%0A*Resultat*: ${TEST_RESULTAT}, Rapport: <https://navikt.github.io/fpsak-autotest/verdikjede|Allure rapport>%0A*Endringer:*%0A${{ env.DIFFERANSE }}"
            if [ ${{ steps.tester.outcome }} == success ]; then
              echo "Test success!"
              echo "::set-env name=SLACK_TITLE::Verdikjedetestene er kjørt uten feil :rocket:"
              echo "::set-env name=SLACK_COLOR::#37df1d"
            else
              echo "Test failure!"
              echo "::set-env name=SLACK_TITLE::Verdikjedetestene er kjørt med feil :boom:"
              echo "::set-env name=SLACK_COLOR::#df1515"
            fi
          else
            echo "Noe gikk galt. GHA fikk ikke opp verdikjeden"
            echo "::set-env name=SLACK_TITLE::Noe gikk galt. GHA fikk ikke opp verdikjeden :man-shrugging:"
            echo "::set-env name=SLACK_MESSAGE::*Trigger*: ${{ github.event.client_payload.trigger }}:${{ github.event.client_payload.version }}%0A*Endringer:*%0A${{ env.DIFFERANSE }}"
            echo "::set-env name=SLACK_COLOR::#e79a07"
          fi

      - name: Slack Notification
        if: always() && steps.slacknotify.outcome == 'success'
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_CHANNEL: fp-verdikjedetester
          SLACK_COLOR: ${{ env.SLACK_COLOR }}
          SLACK_ICON: https://github.com/github.png?size=48
          SLACK_TITLE: ${{ env.SLACK_TITLE }}
          SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
          SLACK_USERNAME: Github Action
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Generer testrapport
        if: always() && env.STACK_STARTED == 'true'
        id: ghpages
        shell: bash
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages -- fpsak
          git --work-tree=gh-pages checkout origin/gh-pages -- verdikjede/history
          resources/allure/set-environment-variables.sh ${{ github.event.client_payload.trigger }}
          cp resources/allure/environment.properties target/allure-results
          cp resources/allure/categories.json target/allure-results
          cp -r gh-pages/verdikjede/history target/allure-results
          mvn allure:report --batch-mode --file pom.xml
          cp -a target/allure-report/. gh-pages/verdikjede/

      - name: Deploy testrapport
        if: always() && steps.ghpages.outcome == 'success'
        uses: crazy-max/ghaction-github-pages@v2.1.0
        with:
          build_dir: gh-pages
        env:
          GH_PAT: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: container-logs

      - name: Sjekker storage
        if: failure()
        shell: bash
        run: |
          docker system df -v
          docker system df
          df -h
