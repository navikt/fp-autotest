name: Kjører Autotestene for verdikjeden

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'JenkinsfileAutotest'
      - 'JenkinsfileAutotestNew'
      - 'CODEOWNERS'
      - '.github/workflows/build-pr.yml'
      - 'resources/keystore/**'
  repository_dispatch:
    types: [fpsak-autotest, fpsak-verdikjede, fpformidling-verdikjede, abakus-verdikjede, fpoppdrag-verdikjede]
  schedule:
    - cron:  '0 0 * * *'

jobs:
  build:
    name: Utfør verdikjede-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set cache key
        run: |
          echo "::set-env name=CACHE_KEY::$(expr $(date +%V) - 1 + 1)"
          echo "::set-env name=PREVIOUS_CACHE_KEY::$(expr $(date +%V) - 1)"
      - uses: actions/cache@v1.1.2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v1.3.0
        with:
          java-version: 1.11

      - name: Setup verdikjeden
        shell: bash
        run: |
          echo ::set-env name=STACK_STARTED::false
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          echo "${{ secrets.GITHUB_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          cd ../pipeline
          ./update-versions.sh ${{ github.event.client_payload.trigger }} ${{ github.event.client_payload.version }}
          docker-compose up --quiet-pull --detach fpsak

      - name: Venter på stacken og sjekker status
        shell: bash
        run: |
          echo ::set-env name=STACK_CREATED::true
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 90 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fp-formidling er oppe"
          echo "Sjekker ikke fp-formidling fordi curl mot isReady returnerte 400 bad request. Antar at den er oppe!"
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 90 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isAlive)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fp-sak er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo ::set-env name=STACK_STARTED::true

      - name: Utfører foreldrepengetestene
        if: github.event_name == 'push' || github.event.action == 'fpsak-autotest'
        id: foreldrepengetestser
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P fpsak
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Utfører verdikjedetestene
        if: steps.foreldrepengetestser.outcome == 'skipped'
        id: verdiekjedetester
        shell: bash
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P verdikjede
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Oppdaterer issue ved feilfrie tester
        if: success() && github.event_name != 'push' && github.event.client_payload.issue-number != null
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          repository: ${{ github.event.client_payload.trigger }}
          event-type: update-issue
          client-payload: '{ "issue-number": "${{ github.event.client_payload.issue-number }}", "success": "true" }'

      - name: Oppdaterer issue ved testfeil
        if: failure() && github.event_name != 'push' && github.event.client_payload.issue-number != null
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          repository: ${{ github.event.client_payload.trigger }}
          event-type: update-issue
          client-payload: '{ "issue-number": "${{ github.event.client_payload.issue-number }}", "success": "false" }'

      - name: Generer testrapport
        if: always() && env.STACK_STARTED == 'true' && steps.foreldrepengetestser.outcome == 'skipped'
        shell: bash
        run: |
          cd resources/allure
          ./set-environment-variables.sh ${{ github.event.client_payload.trigger }}
          cd ../../target/allure-results
          git fetch origin gh-pages
          git checkout origin/gh-pages ../../history
          cp -r ../../history history
          cp ../../resources/allure/environment.properties .
          cp ../../resources/allure/categories.json .
          cd ../..
          mvn allure:report --batch-mode --file pom.xml

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: container-logs

      - name: Sjekker storage
        if: failure()
        shell: bash
        run: |
          docker system df -v
          docker system df
          df -h

      - name: Deploy testrapport
        if: always() && env.STACK_STARTED == 'true' && steps.foreldrepengetestser.outcome == 'skipped'
        uses: crazy-max/ghaction-github-pages@v2.0.0
        with:
          target_branch: gh-pages
          build_dir: target/allure-report/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notification til slack
        if: failure() || env.STACK_STARTED == 'false'
        shell: bash
        run: |
          curl -X POST --data-urlencode \
          'payload={"channel": "#fpsak-autotest",
          "username": "autotestern",
          "blocks": [ { "type": "section", "text": {
          "type": "mrkdwn",
          "text": "  :scream: De automatiske testene feilet: <https://navikt.github.io/fpsak-autotest/|Testrapport> \n
          repository: ${{ github.event.client_payload.trigger }} versjon: ${{ github.event.client_payload.version }} "
          } } ],
          "icon_emoji": ":snowman:"}' ${{ secrets.SLACK_WEBHOOK }}

