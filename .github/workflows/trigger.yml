name: Utfører tester mot SUT

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'CODEOWNERS'
      - '.github/workflows/label-pr.yml'
      - '.github/workflows/notify-slack.yml'
      - '.github/workflows/deprecated-fpsak-trigger.yml'
      - '.github/workflows/trigger-verdikjede.yml'
      - '.github/workflows/deprecated-update-issue.yml'
      - 'lokalutvikling/*'
      - 'docs/*'
  workflow_dispatch:
    inputs:
      trigger:
        description: 'Repository triggering this build'
        required: true
        default: 'navikt/fpsak-autotest'
      version:
        description: 'Docker tag (from repository)'
        required: false
      issue_number:
        description: 'Issue number  (from repository)'
        required: false
  schedule:
    - cron:  '15 0 * * *'

env:
  JUIPTER_PARALLELISM_VK: 8
  JUIPTER_PARALLELISM_FP: 16
  GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:
  fpsak-autotester:
    name: Kjører fpsak spesifikke tester som er trigget av ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
    if: contains(fromJson('["navikt/fp-abakus", "navikt/fp-sak"]'), github.event.inputs.trigger)
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'master'
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # Use commit-sha1 instead of tag for security concerns
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup fpsak og dens avhengigheter
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          cd ../../lokal-utvikling
          ./setup-lokal-utvikling.sh --mock fptilbake --mock fpoppdrag --mock fpformidling --mock fprisk
          cd docker-compose-lokal
          ./update-versions.sh ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
          docker-compose -f docker-compose.yml -f docker-compose-github.yml up --quiet-pull --detach fpsak || (docker ps ; echo "Oppstart feilet. Se etter tjenester som er \"unhealthy\" eller \"restarting\" i listen over." ; exit 1)
      - name: Venter på stacken og sjekker status
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 180 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 240 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV
      - name: Utfører foreldrepengetestene for fpsak
        id: tester
        run: mvn test -e --batch-mode --settings .github/.m2/settings.xml -Djuipter.parallelism=${{ env.JUIPTER_PARALLELISM_FP }} -P fpsak > >(tee test-result-log.txt)

      - name: Sjekker loggen etter feil
        if: always() && env.STACK_STARTED == 'true'
        id: logger
        run: mvn test -e --batch-mode --settings .github/.m2/settings.xml -Djuipter.parallelism=${{ env.JUIPTER_PARALLELISM_FP }} -P loggfeil

      - name: Generer testrapport
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        id: ghpages
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages -- fpsak/history
          resources/allure/set-environment-variables-fpsak.sh ${{ github.event.inputs.trigger }}
          cp resources/allure/environment.properties target/allure-results
          cp resources/allure/categories.json target/allure-results
          cp -r gh-pages/fpsak/history target/allure-results
          mvn allure:report --batch-mode --settings .github/.m2/settings.xml
      - name: Tar testresultat
        if: always() && steps.ghpages.outcome == 'success'
        run: tar -czf fpsak.tar.gz -C target/allure-report .

      - name: Laste opp testresultat
        if: always() && steps.ghpages.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: fpsak-testresultat
          path: fpsak.tar.gz
          retention-days: 1

      - name: Henter testresultat og setter outcome
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        run: |
          echo "TEST_RESULTAT=$(grep -o 'Tests run: [0-9]\+, Failures: [0-9]\+, Errors: [0-9]\+, Skipped: [0-9]\+$' test-result-log.txt)" >> $GITHUB_ENV
          rm test-result-log.txt
      - name: Notify slack
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          steps.tester.outcome != 'cancelled' &&
          github.event.inputs.trigger != null &&
          github.event.inputs.version != null
        run: |
          curl -XPOST -u "x-access-token:${{ secrets.GH_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/navikt/fpsak-autotest/dispatches \
          -d '{ "event_type":"notify-slack",
                "client_payload":{
                    "trigger": "${{ github.event.inputs.trigger }}",
                    "version": "${{ github.event.inputs.version }}",
                    "stack_started": "${{ env.STACK_STARTED }}",
                    "test_outcome": "${{ steps.tester.outcome }}",
                    "loggtest_outcome": "${{ steps.logger.outcome }}",
                    "test_resultat": "${{ env.TEST_RESULTAT }}",
                    "test_suite": "fpsak",
                    "run_id": "${{ github.run_id }}"
                  }}'
      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done
      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: logs-autotest
          path: container-logs
  fptilbake-tester:
    if: github.event.inputs.trigger == 'navikt/fptilbake'
    name: Kjører fptilbake spesifikke tester som er trigget av ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'master'
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # Use commit-sha1 instead of tag for security concerns
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup verdikjeden
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          cd ../pipeline
          ./update-versions.sh ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
          docker-compose -f docker-compose.yml -f docker-compose-github.yml up --quiet-pull --detach fpoppdrag fptilbake fprisk fpdokgen fpabonnent fpsoknad-mottak || (docker ps ; echo "Oppstart feilet. Se etter tjenester som er \"unhealthy\" eller \"restarting\" i listen over." ; exit 1)
      - name: Venter på stacken og sjekker status
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 240 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 240 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpformidling er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8010/fpformidling/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpdokgen er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8291)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fptilbake er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8030/fptilbake/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fprisk er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8075/fprisk/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabonnent er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8065/fpabonnent/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpfordel er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8090/fpfordel/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpinfo er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8040/fpinfo/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "Tester om fpsoknad-mottak er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:9001/api/actuator)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV
      - name: Sjekker minneforbruk
        if: always()
        run: |
          docker stats --no-stream
          free -m
      - name: Utfører testene for fptilbake
        id: tester
        run: mvn test -e --batch-mode --settings .github/.m2/settings.xml -Djuipter.parallelism=${{ env.JUIPTER_PARALLELISM_VK }} -P fptilbake > >(tee test-result-log.txt)

      - name: Generer testrapport
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        id: ghpages
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages -- fptilbake/history
          resources/allure/set-environment-variables.sh ${{ github.event.inputs.trigger }}
          cp resources/allure/environment.properties target/allure-results
          cp resources/allure/categories.json target/allure-results
          cp -r gh-pages/fptilbake/history target/allure-results
          mvn allure:report --batch-mode --settings .github/.m2/settings.xml
      - name: Tar testresultat
        if: always() && steps.ghpages.outcome == 'success'
        run: tar -czf fptilbake.tar.gz -C target/allure-report .

      - name: Laste opp testresultat
        if: always() && steps.ghpages.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: fptilbake-testresultat
          path: fptilbake.tar.gz
          retention-days: 1

      - name: Henter testresultat og setter outcome
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        run: |
          echo "TEST_RESULTAT=$(grep -o 'Tests run: [0-9]\+, Failures: [0-9]\+, Errors: [0-9]\+, Skipped: [0-9]\+$' test-result-log.txt)" >> $GITHUB_ENV
          rm test-result-log.txt
      - name: Notify slack
        if: |
          always() &&
          steps.tester.outcome != 'cancelled' &&
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.trigger != null &&
          github.event.inputs.version != null
        run: |
          curl -XPOST -u "x-access-token:${{ secrets.GH_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/navikt/fpsak-autotest/dispatches \
          -d '{ "event_type":"notify-slack",
                "client_payload":{
                    "trigger": "${{ github.event.inputs.trigger }}",
                    "version": "${{ github.event.inputs.version }}",
                    "stack_started": "${{ env.STACK_STARTED }}",
                    "test_outcome": "${{ steps.tester.outcome }}",
                    "loggtest_outcome": "success",
                    "test_resultat": "${{ env.TEST_RESULTAT }}",
                    "test_suite": "fptilbake",
                    "run_id": "${{ github.run_id }}"
                  }}'
      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done
      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: logs-fptilbake-tester
          path: container-logs
  verdikjedetestene:
    name: Kjører verdikjedetestene som er trigget av ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'master'
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # Use commit-sha1 instead of tag for security concerns
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup verdikjeden
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          cd ../pipeline
          ./update-versions.sh ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
          docker-compose -f docker-compose.yml -f docker-compose-github.yml up --quiet-pull --detach fpsak fpformidling fpdokgen fpoppdrag fptilbake fprisk fpabonnent fpinfo fpfordel fpsoknad-mottak || (docker ps ; echo "Oppstart feilet. Se etter tjenester som er \"unhealthy\" eller \"restarting\" i listen over." ; exit 1)
      - name: Venter på stacken og sjekker status
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 240 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 240 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpformidling er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8010/fpformidling/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpdokgen er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8291)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fptilbake er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8030/fptilbake/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fprisk er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8075/fprisk/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabonnent er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8065/fpabonnent/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpfordel er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8090/fpfordel/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpinfo er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8040/fpinfo/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "Tester om fpsoknad-mottak er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:9001/api/actuator)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV
      - name: Sjekker minneforbruk
        if: always()
        run: |
          docker stats --no-stream
          free -m
      - name: Utfører verdikjedetestene
        id: tester
        run: mvn test -e --batch-mode --settings .github/.m2/settings.xml -Djuipter.parallelism=${{ env.JUIPTER_PARALLELISM_VK }} -P verdikjede > >(tee test-result-log.txt)

      - name: Sjekker loggen etter feil og lekket sensitiv data.
        if: always() && env.STACK_STARTED == 'true'
        id: logger
        run: |
          mvn test -e --batch-mode --settings .github/.m2/settings.xml -Djuipter.parallelism=${{ env.JUIPTER_PARALLELISM_VK }} -P logger
      - name: Sjekker minneforbruk
        if: always()
        run: |
          docker stats --no-stream
          free -m
      - name: Generer testrapport
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        id: ghpages
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages -- verdikjede/history
          resources/allure/set-environment-variables.sh ${{ github.event.inputs.trigger }}
          cp resources/allure/environment.properties target/allure-results
          cp resources/allure/categories.json target/allure-results
          cp -r gh-pages/verdikjede/history target/allure-results
          mvn allure:report --batch-mode --settings .github/.m2/settings.xml
      - name: Tar testresultat
        if: always() && steps.ghpages.outcome == 'success'
        run: tar -czf verdikjede.tar.gz -C target/allure-report .

      - name: Laste opp testresultat
        if: always() && steps.ghpages.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: verdikjede-testresultat
          path: verdikjede.tar.gz
          retention-days: 1

      - name: Henter testresultat
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        shell: bash
        run: |
          echo "TEST_RESULTAT=$(grep -o 'Tests run: [0-9]\+, Failures: [0-9]\+, Errors: [0-9]\+, Skipped: [0-9]\+$' test-result-log.txt)" >> $GITHUB_ENV
          rm test-result-log.txt
      - name: Notify slack
        if: |
          always() && !cancelled() &&
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.trigger != null &&
          github.event.inputs.version != null
        run: |
          curl -XPOST -u "x-access-token:${{ secrets.GH_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/navikt/fpsak-autotest/dispatches \
          -d '{ "event_type":"notify-slack",
                "client_payload":{
                    "trigger": "${{ github.event.inputs.trigger }}",
                    "version": "${{ github.event.inputs.version }}",
                    "stack_started": "${{ env.STACK_STARTED }}",
                    "test_outcome": "${{ steps.tester.outcome }}",
                    "loggtest_outcome": "${{ steps.logger.outcome }}",
                    "test_resultat": "${{ env.TEST_RESULTAT }}",
                    "test_suite": "verdikjede",
                    "run_id": "${{ github.run_id }}"
                  }}'
      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done
      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: logs-verdikjedetester
          path: container-logs
  rapport:
    name: Lager og publiserer test rapport
    if: |
      always() && !cancelled() &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.issue_number != null
    needs: [ fpsak-autotester, fptilbake-tester, verdikjedetestene ]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - name: Henter testresultat for fpsak
        if: contains(fromJson('["success", "failure"]'), needs.fpsak-autotester.result)
        uses: actions/download-artifact@v3
        with:
          name: fpsak-testresultat
          path: .
      - name: Henter testresultat for fptilbake
        if: contains(fromJson('["success", "failure"]'), needs.fptilbake-tester.result)
        uses: actions/download-artifact@v3
        with:
          name: fptilbake-testresultat
          path: .
      - name: Henter testresultat for verdikjede
        if: contains(fromJson('["success", "failure"]'), needs.verdikjedetestene.result)
        uses: actions/download-artifact@v3
        with:
          name: verdikjede-testresultat
          path: .
      - name: Pakk ut testresultat
        if: success()
        run: |
          if [ -f "fpsak.tar.gz" ]; then echo "Testresultat fpsak funnet" && mkdir fpsak && tar -xzf fpsak.tar.gz --directory fpsak; fi
          if [ -f "fptilbake.tar.gz" ]; then echo "Testresultat fptilbake funnet" && mkdir fptilbake && tar -xzf fptilbake.tar.gz --directory fptilbake; fi
          if [ -f "verdikjede.tar.gz" ]; then echo "Testresultat verdikjede funnet" && mkdir verdikjede && tar -xzf verdikjede.tar.gz --directory verdikjede; fi
      - name: Hent eksistrende testrapport og overskriv med nytt test resultat
        if: success()
        id: ghpages
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages
          if [ -d "fpsak" ]; then echo "Oppdatere testresultat for fpsak" && cp -a fpsak/. gh-pages/fpsak; fi
          if [ -d "fptilbake" ]; then echo "Oppdatere testresultat for fptilbake" && cp -a fptilbake/. gh-pages/fptilbake; fi
          if [ -d "verdikjede" ]; then echo "Oppdatere testresultat for verdikjede" && cp -a verdikjede/. gh-pages/verdikjede; fi
      - name: Deploy testrapport
        if: always() && steps.ghpages.outcome == 'success'
        uses: crazy-max/ghaction-github-pages@v3.1.0
        with:
          target_branch: gh-pages
          build_dir: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  deploy-fpsak:
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.issue_number != null &&
      github.event.inputs.trigger != 'navikt/fp-abakus'
    needs: [fpsak-autotester, verdikjedetestene]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.FP_PRIVATE_KEY }}
          app-id: ${{ secrets.FP_APP_ID }}

      - name: Deployer fpsak til dev og prod
        run: |
          curl -XPOST -u "x-access-token:${{ steps.get-token.outputs.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.event.inputs.trigger }}/dispatches \
          -d '{
                "event_type": "promote-command",
                "client_payload": {
                  "github": {
                      "payload": {
                          "issue": {
                              "number": "${{ github.event.inputs.issue_number }}"
                  }}},
                  "slash_command": {
                      "args": {
                          "unnamed": {
                              "arg1": ""
                  }}}
                }
              }'
  deploy-fptilbake:
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.issue_number != null
    needs: [fptilbake-tester, verdikjedetestene]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.FP_PRIVATE_KEY }}
          app-id: ${{ secrets.FP_APP_ID }}

      - name: Deployer applikasjon til dev
        run: |
          curl -XPOST -u "x-access-token:${{ steps.get-token.outputs.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.event.inputs.trigger }}/dispatches \
          -d '{
                "event_type": "promote-command",
                "client_payload": {
                  "github": {
                      "payload": {
                          "issue": {
                              "number": "${{ github.event.inputs.issue_number }}"
                  }}},
                  "slash_command": {
                      "args": {
                          "unnamed": {
                              "arg1": "dev-fss",
                              "arg2": "teamforeldrepenger"
                  }}}
                }
              }'
  deploy-rest:
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.issue_number != null &&
      !contains(fromJson('["navikt/fptilbake", "navikt/fp-sak", "navikt/fp-abakus"]'), github.event.inputs.trigger)
    needs: [verdikjedetestene]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.FP_PRIVATE_KEY }}
          app-id: ${{ secrets.FP_APP_ID }}

      - name: Deployer applikasjon til dev
        run: |
          curl -XPOST -u "x-access-token:${{ steps.get-token.outputs.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.event.inputs.trigger }}/dispatches \
          -d '{
                "event_type": "promote-command",
                "client_payload": {
                  "github": {
                      "payload": {
                          "issue": {
                              "number": "${{ github.event.inputs.issue_number }}"
                  }}},
                  "slash_command": {
                      "args": {
                          "unnamed": {
                              "arg1": "dev-fss"
                  }}}
                }
              }'
