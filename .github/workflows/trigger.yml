name: Utfører tester mot SUT

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'CODEOWNERS'
      - '.github/workflows/label-pr.yml'
      - '.github/workflows/notify-slack.yml'
      - '.github/workflows/deprecated-fpsak-trigger.yml'
      - '.github/workflows/trigger-verdikjede.yml'
      - '.github/workflows/deprecated-update-issue.yml'
      - 'lokalutvikling/*'
      - 'docs/*'
  workflow_dispatch:
    inputs:
      trigger:
        description: 'Repository triggering this build'
        required: true
        default: 'navikt/fpsak-autotest'
      version:
        description: 'Docker tag (from repository)'
        required: false
      issue_number:
        description: 'Issue number  (from repository)'
        required: false
  schedule:
    - cron:  '15 0 * * *'

env:
  GITHUB_USERNAME: x-access-token
  GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:
  fpsak-autotester:
    if: contains(fromJson('["navikt/fp-abakus", "navikt/fp-sak"]'), github.event.inputs.trigger)
    name: Kjører fpsak spesifikke tester som er trigget av ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 15

      - name: Log into ghcr registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup fpsak og dens avhengigheter
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          cd ../../lokal-utvikling
          ./setup-lokal-utvikling.sh --mock fptilbake --mock fpoppdrag --mock fpformidling --mock fprisk
          ./update-versions.sh ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
          docker-compose -f docker-compose-lokal/docker-compose.yml up --quiet-pull --detach fpsak

      - name: Venter på stacken og sjekker status
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 180 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV

      - name: Utfører foreldrepengetestene for fpsak
        id: tester
        run: mvn test --batch-mode --settings .github/.m2/settings.xml -P fpsak > >(tee test-result-log.txt)

      - name: Sjekker loggen etter feil
        if: always() && env.STACK_STARTED == 'true'
        id: logger
        run: mvn test --batch-mode --settings .github/.m2/settings.xml -P loggfeil

      - name: Generer testrapport
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        id: ghpages
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages -- index.html
          git --work-tree=gh-pages checkout origin/gh-pages -- verdikjede
          git --work-tree=gh-pages checkout origin/gh-pages -- fptilbake
          git --work-tree=gh-pages checkout origin/gh-pages -- fpsak/history
          resources/allure/set-environment-variables-fpsak.sh ${{ github.event.inputs.trigger }}
          cp resources/allure/environment.properties target/allure-results
          cp resources/allure/categories.json target/allure-results
          cp -r gh-pages/fpsak/history target/allure-results
          mvn allure:report --batch-mode --file pom.xml
          cp -a target/allure-report/. gh-pages/fpsak/

      - name: Deploy testrapport
        if: always() && steps.ghpages.outcome == 'success'
        uses: crazy-max/ghaction-github-pages@v2.3.0
        with:
          build_dir: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Henter testresultat og setter outcome
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        run: |
          echo "TEST_RESULTAT=$(grep -o 'Tests run: [0-9]\+, Failures: [0-9]\+, Errors: [0-9]\+, Skipped: [0-9]\+$' test-result-log.txt)" >> $GITHUB_ENV
          rm test-result-log.txt

      - name: Notify slack
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          steps.tester.outcome != 'cancelled' &&
          github.event.inputs.trigger != null &&
          github.event.inputs.version != null
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          event-type: notify-slack
          client-payload: |
            {
            "trigger": "${{ github.event.inputs.trigger }}",
            "version": "${{ github.event.inputs.version }}",
            "stack_started": "${{ env.STACK_STARTED }}",
            "test_outcome": "${{ steps.tester.outcome }}",
            "loggtest_outcome": "${{ steps.logger.outcome }}",
            "test_resultat": "${{ env.TEST_RESULTAT }}",
            "test_suite": "fpsak",
            "run_id": "${{ github.run_id }}"
            }

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs-autotest
          path: container-logs

  fptilbake-tester:
    if: github.event.inputs.trigger == 'navikt/fptilbake'
    name: Kjører fptilbake spesifikke tester som er trigget av ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 15

      - name: Log into ghcr registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup verdikjeden
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          cd ../pipeline
          ./update-versions.sh ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
          docker-compose up --quiet-pull --detach fpsak fpformidling fpdokgen fpoppdrag fptilbake fprisk fpabonnent

      - name: Venter på stacken og sjekker status
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 180 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 240 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpformidling er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8010/fpformidling/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpdokgen er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8291)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fptilbake er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8030/fptilbake/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fprisk er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8075/fprisk/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabonnent er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8065/fpabonnent/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV

      - name: Sjekker minneforbruk
        if: always()
        run: |
          docker stats --no-stream
          free -m

      - name: Utfører testene for fptilbake
        id: tester
        run: mvn test --batch-mode --settings .github/.m2/settings.xml -P fptilbake > >(tee test-result-log.txt)

      - name: Generer testrapport
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        id: ghpages
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages -- index.html
          git --work-tree=gh-pages checkout origin/gh-pages -- verdikjede
          git --work-tree=gh-pages checkout origin/gh-pages -- fpsak
          git --work-tree=gh-pages checkout origin/gh-pages -- fptilbake/history
          resources/allure/set-environment-variables.sh ${{ github.event.inputs.trigger }}
          cp resources/allure/environment.properties target/allure-results
          cp resources/allure/categories.json target/allure-results
          cp -r gh-pages/fptilbake/history target/allure-results
          mvn allure:report --batch-mode --file pom.xml
          cp -a target/allure-report/. gh-pages/fptilbake/

      - name: Deploy testrapport
        if: always() && steps.ghpages.outcome == 'success'
        uses: crazy-max/ghaction-github-pages@v2.3.0
        with:
          build_dir: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Henter testresultat og setter outcome
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        run: |
          echo "TEST_RESULTAT=$(grep -o 'Tests run: [0-9]\+, Failures: [0-9]\+, Errors: [0-9]\+, Skipped: [0-9]\+$' test-result-log.txt)" >> $GITHUB_ENV
          rm test-result-log.txt

      - name: Notify slack
        if: |
          always() &&
          steps.tester.outcome != 'cancelled' &&
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.trigger != null &&
          github.event.inputs.version != null
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          event-type: notify-slack
          client-payload: |
            {
            "trigger": "${{ github.event.inputs.trigger }}",
            "version": "${{ github.event.inputs.version }}",
            "stack_started": "${{ env.STACK_STARTED }}",
            "test_outcome": "${{ steps.tester.outcome }}",
            "loggtest_outcome": "success",
            "test_resultat": "${{ env.TEST_RESULTAT }}",
            "test_suite": "fptilbake",
            "run_id": "${{ github.run_id }}"
            }

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs-fptilbake-tester
          path: container-logs

  verdikjedetestene:
    name: Kjører verdikjedetestene som er trigget av ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 15

      - name: Log into ghcr registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup verdikjeden
        run: |
          echo "STACK_STARTED=false" >> $GITHUB_ENV
          echo "Oppretter dummy keystore for testing"
          cd resources/keystore
          ./make-dummy-keystore.sh
          cd ../pipeline
          ./update-versions.sh ${{ github.event.inputs.trigger }} ${{ github.event.inputs.version }}
          docker-compose up --quiet-pull --detach fpsak fpformidling fpdokgen fpoppdrag fptilbake fprisk fpabonnent fpinfo fpfordel fpsoknad-mottak

      - name: Venter på stacken og sjekker status
        run: |
          echo "STACK_CREATED=true" >> $GITHUB_ENV
          docker ps -a
          echo
          echo "Tester om VTP er oppe"
          timeout 5 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8060/rest/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabakus er oppe"
          timeout 180 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8015/fpabakus/internal/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpsak er oppe"
          timeout 240 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/fpsak/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpformidling er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8010/fpformidling/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpdokgen er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8291)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpoppdrag er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8070/fpoppdrag/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fptilbake er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8030/fptilbake/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fprisk er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8075/fprisk/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpabonnent er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8065/fpabonnent/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpfordel er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8090/fpfordel/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo
          echo "Tester om fpinfo er oppe"
          timeout 60 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:8040/fpinfo/internal/health/isReady)" != "200" ]]; do sleep 2; done' || false
          echo Oppe!
          echo "STACK_STARTED=true" >> $GITHUB_ENV

      - name: Sjekker minneforbruk
        if: always()
        run: |
          docker stats --no-stream
          free -m

      - name: Utfører verdikjedetestene
        id: tester
        run: mvn test --batch-mode --settings .github/.m2/settings.xml -P verdikjede > >(tee test-result-log.txt)

      - name: Sjekker loggen etter feil og lekket sensitiv data.
        if: always() && env.STACK_STARTED == 'true'
        id: logger
        run: |
          mvn test --batch-mode --settings .github/.m2/settings.xml -P logger

      - name: Sjekker minneforbruk
        if: always()
        run: |
          docker stats --no-stream
          free -m

      - name: Generer testrapport
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        id: ghpages
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages -- index.html
          git --work-tree=gh-pages checkout origin/gh-pages -- fpsak
          git --work-tree=gh-pages checkout origin/gh-pages -- fptilbake
          git --work-tree=gh-pages checkout origin/gh-pages -- verdikjede/history
          resources/allure/set-environment-variables.sh ${{ github.event.inputs.trigger }}
          cp resources/allure/environment.properties target/allure-results
          cp resources/allure/categories.json target/allure-results
          cp -r gh-pages/verdikjede/history target/allure-results
          mvn allure:report --batch-mode --file pom.xml
          cp -a target/allure-report/. gh-pages/verdikjede/

      - name: Deploy testrapport
        if: always() && steps.ghpages.outcome == 'success'
        uses: crazy-max/ghaction-github-pages@v2.3.0
        with:
          build_dir: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Henter testresultat
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          env.STACK_STARTED == 'true' &&
          steps.tester.outcome != 'skipped' &&
          steps.tester.outcome != 'cancelled'
        shell: bash
        run: |
          echo "TEST_RESULTAT=$(grep -o 'Tests run: [0-9]\+, Failures: [0-9]\+, Errors: [0-9]\+, Skipped: [0-9]\+$' test-result-log.txt)" >> $GITHUB_ENV
          rm test-result-log.txt

      - name: Notify slack
        if: |
          always() &&
          github.event_name == 'workflow_dispatch' &&
          steps.tester.outcome != 'cancelled' &&
          github.event.inputs.trigger != null &&
          github.event.inputs.version != null
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          event-type: notify-slack
          client-payload: |
            {
            "trigger": "${{ github.event.inputs.trigger }}",
            "version": "${{ github.event.inputs.version }}",
            "stack_started": "${{ env.STACK_STARTED }}",
            "test_outcome": "${{ steps.tester.outcome }}",
            "loggtest_outcome": "${{ steps.logger.outcome }}",
            "test_resultat": "${{ env.TEST_RESULTAT }}",
            "test_suite": "verdikjede",
            "run_id": "${{ github.run_id }}"
            }

      - name: Dumper logger for feilsøking
        if: failure() && env.STACK_CREATED == 'true'
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure() && env.STACK_CREATED == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs-verdikjedetester
          path: container-logs

  deploy-fpsak:
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.issue_number != null
    needs: [fpsak-autotester, verdikjedetestene]
    runs-on: ubuntu-latest
    steps:
      - name: Henter ut repo navn fra trigger
        run: |
          echo "REPO=$(echo '${{ github.event.inputs.trigger }}' | cut -d'/' -f2)" >> $GITHUB_ENV
      - uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.FP_PRIVATE_KEY }}
          app-id: ${{ secrets.FP_APP_ID }}

      - name: Kommenterer issue med test OK
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.get-token.outputs.token }}
          script: |
            github.issues.createComment({
              issue_number: '${{ github.event.inputs.issue_number }}',
              owner: 'navikt',
              repo: '${{ env.REPO }}',
              body: 'Alle testene gikk grønne!'
            })
      - name: Trigger deploy til teamforeldrepenger
        if: github.event.inputs.trigger != 'navikt/fp-abakus'
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.get-token.outputs.token }}
          script: |
            github.issues.createComment({
              issue_number: '${{ github.event.inputs.issue_number }}',
              owner: 'navikt',
              repo: '${{ env.REPO }}',
              body: '/promote dev-fss'
            })
#            github.issues.createComment({
#              issue_number: '${{ github.event.inputs.issue_number }}',
#              owner: 'navikt',
#              repo: '${{ env.REPO }}',
#              body: '/promote prod-fss'
#            })

  deploy-fptilbake:
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.issue_number != null
    needs: [fptilbake-tester, verdikjedetestene]
    runs-on: ubuntu-latest
    steps:
      - name: Henter ut repo navn fra trigger
        run: |
          echo "REPO=$(echo '${{ github.event.inputs.trigger }}' | cut -d'/' -f2)" >> $GITHUB_ENV
      - uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.FP_PRIVATE_KEY }}
          app-id: ${{ secrets.FP_APP_ID }}

      - name: Trigger deploy til teamforeldrepenger
        if: github.event.inputs.trigger != 'navikt/fp-abakus'
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.get-token.outputs.token }}
          script: |
            github.issues.createComment({
              issue_number: '${{ github.event.inputs.issue_number }}',
              owner: 'navikt',
              repo: '${{ env.REPO }}',
              body: '/promote fp dev-fss teamforeldrepenger'
            })
            github.issues.createComment({
              issue_number: '${{ github.event.inputs.issue_number }}',
              owner: 'navikt',
              repo: '${{ env.REPO }}',
              body: 'Alle testene gikk grønne!'
            })

  deploy-rest:
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.issue_number != null &&
      !contains(fromJson('["navikt/fptilbake", "navikt/fp-sak", "navikt/fp-abakus"]'), github.event.inputs.trigger)
    needs: [verdikjedetestene]
    runs-on: ubuntu-latest
    steps:
      - name: Henter ut repo navn fra trigger
        run: |
          echo "REPO=$(echo '${{ github.event.inputs.trigger }}' | cut -d'/' -f2)" >> $GITHUB_ENV
      - uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.FP_PRIVATE_KEY }}
          app-id: ${{ secrets.FP_APP_ID }}

      - name: Trigger deploy til teamforeldrepenger
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.get-token.outputs.token }}
          script: |
            github.issues.createComment({
              issue_number: '${{ github.event.inputs.issue_number }}',
              owner: 'navikt',
              repo: '${{ env.REPO }}',
              body: '/promote dev-fss'
            })
            github.issues.createComment({
              issue_number: '${{ github.event.inputs.issue_number }}',
              owner: 'navikt',
              repo: '${{ env.REPO }}',
              body: 'Alle testene gikk grønne!'
            })

