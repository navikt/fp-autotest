name: Utfører tester mot SUT

on:
  workflow_call:
    inputs:
      build-version:
        description: 'Docker tag (from repository)'
        type: string
        required: false
        default: 'latest'
      parallellitet:
        description: 'Docker tag (from repository)'
        type: string
        required: false
        default: '8'
      test-suite:
        description: 'Test suite å kjøre (fpsak|fptilbake|verdikjede)'
        type: string
        required: true
      run-tests:
        description: 'Skal vi kjøre testene?'
        type: boolean
        required: false
        default: true
    outputs:
      resultat:
        description: "Test resultat"
        value: ${{ jobs.autotest.outputs.result }}

jobs:
  autotest:
    name: Kjører ${{ inputs.test-suite }}-tester mot ${{ github.repository }} ${{ inputs.build-version }}
    if: inputs.run-tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      result: ${{ steps.result.outputs.result }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'navikt/fp-autotest'
          ref: 'master'

      - name: Create maven .m2 settings for GITHUB
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          repositories: '[{"id": "github", "name": "github", "url": "https://maven.pkg.github.com/${{ github.repository }}",
              "releases": { "enabled": "true" }, "snapshots": { "enabled": "false" }}]'
          servers: '[{ "id": "github", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN}}" }]'
          output_file: settings.xml

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # Use commit-sha1 instead of tag for security concerns
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup keystore
        shell: bash
        run: |
          cd resources/keystore
          ./make-dummy-keystore.sh

      - name: Setup fpsak og dens avhengigheter
        id: setup
        shell: bash
        run: |
          services=""
          if [[ ${{ inputs.test-suite }} == 'fpsak' ]]; then
            cd lokal-utvikling
            ./setup-lokal-utvikling.sh --mock fptilbake --mock fpoppdrag --mock fpformidling --mock fprisk
            cd docker-compose-lokal
            services=("fpsak")
          else
            cd resources/pipeline
            services=("fpsak" "fpformidling" "fpdokgen" "fpoppdrag" "fptilbake" "fprisk" "fpabonnent" "fpinfo" "fpfordel" "fpsoknad-mottak")
          fi

          ./update-versions.sh ${{ github.repository }} ${{ inputs.build-version }}
          echo "Kjører docker compose up på følgende applikasjoner: ${services[*]}"
          docker-compose -f compose.yml -f compose-github.yml up --quiet-pull --wait "${services[@]}" || (docker ps ; echo "Oppstart feilet. Se etter tjenester som er \"unhealthy\" eller \"restarting\" i listen over." ; exit 1)

      - name: Utfører tester fra test suite ${{ inputs.test-suite }} mot SUT
        id: tester
        shell: bash
        run: mvn test -e --batch-mode -s settings.xml -Djuipter.parallelism=${{ inputs.parallellitet }} -P ${{ inputs.test-suite }} > >(tee test-result-log.txt)

      - name: Sjekker loggen etter feil
        if: (success() || failure()) && steps.setup.outcome == 'success'
        id: logger
        shell: bash
        run: mvn test -e --batch-mode -s settings.xml -Djuipter.parallelism=${{ inputs.parallellitet }} -P loggfeil

      - name: Utled testresultat
        if: (success() || failure()) && steps.setup.outcome == 'success'
        id: result
        shell: bash
        run: echo "result=test-${{ steps.tester.outcome }} logg-${{ steps.logger.outcome }}" >> $GITHUB_OUTPUT

      - name: Generer testrapport
        if: (success() || failure()) && steps.setup.outcome == 'success' && ${{ github.repository }} != 'navikt/fp-autotest'
        id: ghpages
        shell: bash
        run: |
          git fetch origin gh-pages
          mkdir gh-pages
          git --work-tree=gh-pages checkout origin/gh-pages -- ${{ inputs.test-suite }}/history
          resources/allure/set-environment-variables.sh ${{ github.repository }}
          cp resources/allure/environment.properties target/allure-results
          cp resources/allure/categories.json target/allure-results
          cp -r gh-pages/${{ inputs.test-suite }}/history target/allure-results
          mvn allure:report --batch-mode -s settings.xml

      - name: Tar testresultat
        if: (success() || failure()) && steps.ghpages.outcome == 'success'
        shell: bash
        run: tar -czf ${{ inputs.test-suite }}.tar.gz -C target/allure-report .

      - name: Laste opp testresultat
        if: (success() || failure()) && steps.ghpages.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.test-suite }}-testresultat
          path: ${{ inputs.test-suite }}.tar.gz
          retention-days: 1

      - name: Dumper logger for feilsøking
        if: failure() && !cancelled()
        shell: bash
        run: |
          mkdir container-logs
          cd container-logs
          docker ps -a --format '{{.Names}}' | while read pod; do docker logs $pod > $pod.log 2>&1; done

      - name: Laste opp logger
        if: failure() && !cancelled()
        uses: actions/upload-artifact@v3
        with:
          name: logs-${{ inputs.test-suite }}
          path: container-logs
